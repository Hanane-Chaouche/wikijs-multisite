#Nom du workflow qui appara√Ætra dans GitHub Actions
name: D√©ploiement Wiki.js

# Ce workflow se d√©clenche automatiquement...
on:
  push:
    branches:
      - main  # ...quand un push est fait sur la branche main

jobs:
  deploy:  # Nom du job
    name: D√©ployer sur la VM Azure  # Nom visible dans l'interface GitHub
    runs-on: ubuntu-latest  # üíª GitHub va utiliser une machine Ubuntu pour ex√©cuter les √©tapes

    steps:
      #  √âtape 1 : R√©cup√©rer le code du d√©p√¥t GitHub
      - name: Cloner le d√©p√¥t
        uses: actions/checkout@v3  # Action officielle pour r√©cup√©rer ton code

      #  √âtape 2 : Configurer la connexion SSH avec ta cl√© priv√©e (stock√©e dans GitHub Secrets)
      - name: Activer l‚Äôagent SSH
        uses: webfactory/ssh-agent@v0.7.0  # Cette action g√®re automatiquement la configuration SSH
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Cl√© priv√©e s√©curis√©e que tu as ajout√©e dans GitHub

      #  √âtape 3 : Se connecter √† ta VM et ex√©cuter les commandes √† distance
      - name: D√©ployer via SSH
        run: |
          #  Connexion SSH √† la VM avec utilisateur + IP (secrets)
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'

            #  Aller dans le dossier du projet sur la machine distante
            cd /home/azureuser/wikijs_project/wikijs-multisite

            #  Mettre √† jour le code depuis GitHub
            git pull origin main

            #  Red√©marrer les trois instances Wiki.js
            docker compose -f instance/wiki1/docker-compose.yml up -d
            docker compose -f instance/wiki2/docker-compose.yml up -d
            docker compose -f instance/wiki3/docker-compose.yml up -d

            #  Red√©marrer Nginx pour prendre en compte les changements
            docker compose -f nginx/docker-compose.yml restart

          EOF  # Fin de la session SSH
